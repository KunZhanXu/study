<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建bean的三种方式-->
    <!--第一种方式:使用默认函数创建
            在spring配置文件中使用bean标签,配以id和class属性之后,且没有其他属性和标签是
            采用的就是默认构造函数创建bean对象,此时如果类中没有默认构造函数,则对象无法创建.
    -->
    <!--<bean id="accountService" class="com.xkz.service.impl.AccountServiceImpl"></bean>-->

    <!--第二种方法:使用普通工厂中的方法创建对象(使用某个类的方法创建对象,并存入spring容器)-->
    <!--<bean id="instanceFactory" class="com.xkz.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!--第三种方法:使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象,并存入spring容器)-->
    <!--<bean id="accountService" class="com.xkz.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!--bean的作用范围调整
        bean标签的scope属性:
            作用:用于指定bean的作用范围
            取值:常用的就是单例的和多例的
                singleton:   单例的(默认的)
                prototype:   多例的
                request:     作用于web应用请求范围
                session:     作用于web应用的会话范围
                global-session:作用于集群环境的的会话范围(全局会话范围),当不是集群环境时,它就是session

        <bean id="accountService" class="com.xkz.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->

    <!--bean对象的生命周期
            单例对象
                出生:当容器创建时,对象出生
                活着:只要容器还在,对象一直活着
                死亡:容器销毁,对象消亡
                总结:单例对象的生命周期和容器相同
            多例对象
                出生
                活着
                死亡
     -->
    <bean id="accountService" class="com.xkz.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean>

</beans>